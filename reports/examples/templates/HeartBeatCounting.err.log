Traceback (most recent call last):
  File "/opt/hostedtoolcache/Python/3.9.23/x64/lib/python3.9/site-packages/jupyter_core/utils/__init__.py", line 154, in wrapped
    asyncio.get_running_loop()
RuntimeError: no running event loop

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/opt/hostedtoolcache/Python/3.9.23/x64/lib/python3.9/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/opt/hostedtoolcache/Python/3.9.23/x64/lib/python3.9/site-packages/nbclient/client.py", line 1319, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/opt/hostedtoolcache/Python/3.9.23/x64/lib/python3.9/site-packages/jupyter_core/utils/__init__.py", line 158, in wrapped
    return loop.run_until_complete(inner)
  File "/opt/hostedtoolcache/Python/3.9.23/x64/lib/python3.9/asyncio/base_events.py", line 647, in run_until_complete
    return future.result()
  File "/opt/hostedtoolcache/Python/3.9.23/x64/lib/python3.9/site-packages/nbclient/client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "/opt/hostedtoolcache/Python/3.9.23/x64/lib/python3.9/site-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/opt/hostedtoolcache/Python/3.9.23/x64/lib/python3.9/site-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
counts = []
for nTrial in range(6):

    print(f'Analyzing trial number {nTrial+1}')

    signal, peaks = ppg_peaks(ppg[str(nTrial)][0], clean_extra=True, sfreq=75)
    axs = plot_raw(
        signal=signal, sfreq=1000, figsize=(18, 5), clean_extra=True,
        show_heart_rate=True
        );

    # Show the windows of interest
    # We need to convert sample vector into Matplotlib internal representation
    # so we can index it easily
    x_vec = date2num(
        pd.to_datetime(
            np.arange(0, len(signal)), unit="ms", origin="unix"
            )
        )
    l = len(signal)/1000
    for i in range(2):
        # Pre-trial time
        axs[i].axvspan(
            x_vec[0], x_vec[- (3+df.Duration.iloc[nTrial]) * 1000]
            , alpha=.2
            )
        # Post trial time
        axs[i].axvspan(
            x_vec[- 3 * 1000], 
            x_vec[- 1], 
            alpha=.2
            )
    plt.show()

    # Detected heartbeat in the time window of interest
    peaks = peaks[int(l - (3+df.Duration.iloc[nTrial]))*1000:int((l-3)*1000)]

    rr = np.diff(np.where(peaks)[0])

    _, axs = plt.subplots(ncols=2, figsize=(12, 6))
    plot_subspaces(rr=rr, ax=axs);
    plt.show()

    trial_counts = np.sum(peaks)
    print(f'Reported: {df.Reported.loc[nTrial]} beats ; Detected : {trial_counts} beats')
    counts.append(trial_counts)
------------------

----- stdout -----
Analyzing trial number 1
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mTypeError[0m                                 Traceback (most recent call last)
Cell [0;32mIn[8], line 6[0m
[1;32m      2[0m [38;5;28;01mfor[39;00m nTrial [38;5;129;01min[39;00m [38;5;28mrange[39m([38;5;241m6[39m):
[1;32m      4[0m     [38;5;28mprint[39m([38;5;124mf[39m[38;5;124m'[39m[38;5;124mAnalyzing trial number [39m[38;5;132;01m{[39;00mnTrial[38;5;241m+[39m[38;5;241m1[39m[38;5;132;01m}[39;00m[38;5;124m'[39m)
[0;32m----> 6[0m     signal, peaks [38;5;241m=[39m [43mppg_peaks[49m[43m([49m[43mppg[49m[43m[[49m[38;5;28;43mstr[39;49m[43m([49m[43mnTrial[49m[43m)[49m[43m][49m[43m[[49m[38;5;241;43m0[39;49m[43m][49m[43m,[49m[43m [49m[43mclean_extra[49m[38;5;241;43m=[39;49m[38;5;28;43;01mTrue[39;49;00m[43m,[49m[43m [49m[43msfreq[49m[38;5;241;43m=[39;49m[38;5;241;43m75[39;49m[43m)[49m
[1;32m      7[0m     axs [38;5;241m=[39m plot_raw(
[1;32m      8[0m         signal[38;5;241m=[39msignal, sfreq[38;5;241m=[39m[38;5;241m1000[39m, figsize[38;5;241m=[39m([38;5;241m18[39m, [38;5;241m5[39m), clean_extra[38;5;241m=[39m[38;5;28;01mTrue[39;00m,
[1;32m      9[0m         show_heart_rate[38;5;241m=[39m[38;5;28;01mTrue[39;00m
[1;32m     10[0m         );
[1;32m     12[0m     [38;5;66;03m# Show the windows of interest[39;00m
[1;32m     13[0m     [38;5;66;03m# We need to convert sample vector into Matplotlib internal representation[39;00m
[1;32m     14[0m     [38;5;66;03m# so we can index it easily[39;00m

[0;31mTypeError[0m: ppg_peaks() got an unexpected keyword argument 'clean_extra'

